
Os códigos LDPC, Low Density Parity Codes, são códigos usados para a checagem e
correção de erros.

Para entender melhor eles, vamos ver como podemos representar a checagem
convencional de um bit, como um grafo, e então veremos como extrapolar para
chegarmos no LDPC.

<transição Paridade Horizontal Simples>

Em uma paridade horizontal convencional, "contamos" o número de bits 1 e
incluímos mais um bit na mensagem tal que a quantidade de bits 1 total seja par.

Essa "contagem" pode ser simplificada usando uma operação de ou exclusivo em
todos os bits, inclusive no da paridade. Assim, se o resultado da operação for
zero, a quantidade de bits 1 é par.

Por exemplo, se quiséssemos gerar o bit de paridade para a sequência a seguir,
faríamos o XOR de todos os bits. Como obtemos 0, sabemos então que a quantidade
de bits 1 na sequência é par e, para não alterar essa paridade, o novo bit terá
que ser 0.

Nessa outra sequência, ao fazer o XOR, obtemos 1. Isso quer dizer que quantidade
de bits 1 é ímpar, e para mudar a paridade da sequência, o bit que iremos
adicionar precisa ser 1.

<transição Representação como Grafo>

Podemos representar os passos anteriores como um grafo com certas propriedades.

Nesse grafo os vértices são divididos de duas formas, Nodos de Variáveis e Nodos
de Checagem.

Os nodos de variáveis incluem toda a mensagem a ser enviada, incluindo os bits
de paridade. Cada um deles vai receber um bit da mensagem.

Os nodos de checagem realizam um XOR entre os nodos nos quais está conectado.
Nesse caso da paridade horizontal, existe apenas um nodo que está conectado a
todos os nodos de variáveis.

<transição um código é válido se ...>

Nesse sistema, para que uma mensagem seja válida, os bits correspondentes devem
ser colocados em seus respectivos nodos e todos os nodos de checagem devem ser
0.

Vamos ver um exemplo para ficar mais concreto.

<transição exemplo>

Nesse exemplo, queremos descobrir qual deve ser o bit '?' de paridade para uma
mensagem de 5 bits.

Para isso, fazemos o XOR com cada um dos bits e obtemos uma equação.

Resolvendo, descobrimos que o o bit '?' de paridade é 0.

<transição>

Um problema da paridade horizontal é que se um número par de bits for trocado,
o algoritmo nos dirá que a mensagem está intacta, mesmo não estando.

Além disso, mesmo numa situação que apenas um bit foi trocado, não temos como
saber qual foi trocado, impossibilitando qualquer tentativa de recuperar a
mensagem original.

<transição>

Nos códigos LDPC adicionamos mais nodos de checagem, porém cada um deles é
conectado a só alguns dos nodos de variáveis.

Assim temos mais segurança que os códigos estão corretos, ao mesmo tempo que,
caso a mensagem contenha um erro, podemos descobrir quais bits que foram
trocados.

<transição>

A seguir temos um grafo representando certo código LDPC. Ele possui 3 nodos de
checagem e 6 nodos de variáveis.

Uma coisa a se notar é que os Nodos de Checagem não são os bits de paridade,
porém todo Nodo de checagem é conectado a pelo menos um bit de paridade
diferente.

Isso é necessário para não restringir as sequências de mensagens, já que, se um
Nodo de Checagem não se conectasse em um bit de paridade, o resultado desse nodo
depende inteiramente nos bits da mensagem.

As ligações entre os nodos de variáveis e checagem é arbitrária, e normalmente
aleatória, porém é importante que sejam usados os mesmos grafos na codificação e
decodificação.

<transição>

Vamos usar o mesmo exemplo anterior, porém dessa vez com 3 nodos de checagem e
consequentemente 3 bits de paridade, X, Y e Z.

Nesse caso, cada nodo é conectado a apenas um bit de paridade. Isso não é
necessário, porém deixa as contas mais fáceis.

<transição>

No final ficamos com um sistema linear, que podemos resolver com o algoritmo de
Eliminação de Gauss. Graças ao fato de cada nodo de checagem só estar conectado
a um bit de paridade, temos apenas uma incógnita por equação.

<transição>

Para ficar mais simples, podemos pré computar essas equações em função da
sequência de bits que queremos codificar, assim deixando a codificação muito
mais rápida.

<transição>

FIM carajo




vim: tw=80
