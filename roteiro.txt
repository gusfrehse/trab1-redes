
Os códigos LDPC, Low Density Parity Codes, são códigos usados para a checagem e
correção de erros.

Para entender melhor eles, vamos ver como podemos representar a checagem
convencional de um bit, como um grafo, e então veremos como extrapolar para
chegarmos no LDPC.

<transicao Paridade Horizontal Simples>

Em uma paridade horizontal convencional, "contamos" o número de bits 1 e
incluímos mais um bit na mensagem tal que a quantidade de bits 1 total seja par.

Essa "contagem" pode ser simplificada usando uma operação de ou-exclusivo em
todos os bits, inclusive no da paridade. Assim, se o resultado da operação for
zero, a quantidade de bits 1 é par.

Por exemplo, se quiséssemos gerar o bit de paridade para a sequência a seguir,
faríamos o XOR de todos os bits. Como obtemos 0, sabemos então que a quantidade
de bits 1 na sequência é par e, para não alterar essa paridade, o novo bit terá
que ser 0.

Nessa outra sequência, ao fazer o XOR, obtemos 1. Isso quer dizer que quantidade
de bits 1 é ímpar, e para mudar a paridade da sequência, o bit que iremos
adicionar precisa ser 1.

<transicao Representacao como Grafo>

Podemos representar os passos anteriores como um grafo com certas propriedades.

Nesse grafo os vértices são divididos de duas formas, Nodos de Variáveis e Nodos
de Checagem.

Os nodos de variáveis incluem toda a mensagem a ser enviada, incluindo os bits
de paridade. Cada um deles vai receber um bit da mensagem.

Os nodos de checagem realizam um XOR entre os nodos nos quais está conectado.
Nesse caso da paridade horizontal, existe apenas um nodo que está conectado a
todos os nodos de variáveis.

<transicao um código é válido se ...>

Nesse sistema, para que uma mensagem seja válida, os bits correspondentes devem
ser colocados em seus respectivos nodos e todos os nodos de checagem devem ser
0.

Vamos ver um exemplo para ficar mais concreto.

<transicao exemplo>

Nesse exemplo, queremos descobrir qual deve ser o bit '?' de paridade para uma
mensagem de 5 bits.

Para isso, fazemos o XOR com cada um dos bits.





